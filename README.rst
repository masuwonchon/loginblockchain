Login Block Chain - The Python Login Block Chain Library
========================================================

This is login hash block algorithms in python-flask. If you want to learn about it, you can download from 
`KISA KrCERT <https://www.boho.or.kr/data/reportView.do?bulletin_writing_sequence=35003>`_

Accounts stolen as the result of recent security incidents in vulnerable sites are generating secondary damages. These are cases of account hijacking. The basic problem leading to account hijacking is an authentication process that only checks for matching of the user attempting login and the account user using only their account data (ID and password). The damage by account hijacking can thus be reduced by providing various authentication means in addition to the account data and using the method of multi-factor authentication through active user intervention.
One of the most well-known multi-factor authentication methods is OTP (One-Time Password). OTP generates a single-use random number by a special algorithm instead of a pre-specified password. When a user attempts to log in, the system performs authentication with the account data, then with the additional authentication using OTP input to complete the login process. Although multi-factor authentication is effective in preventing account hijacking by authenticating the matching of the user attempting login and the account user via active intervention of the user, it reduces user convenience as it requires additional user input each time.

In other words, using multi-factor authentication can increase the security level but with the downside of lower user convenience. It is therefore used mostly in the financial sector where additional security can be mandatorily enforced. As low convenience in the general service environment can lead to rejection by users, solutions such as blocking by IP critical value and log analysis are being used in response.
However, these methods cannot solve the intrinsic problem of account hijacking due to low- security strength even though it provides convenience to users. Thus, the dilemma of security level vs. convenience has limitations as shown in [Figure 14]. Many enterprises struggle with business strategies to deal with account hijacking while balancing the security level and user convenience. The following method presents a hybrid solution to account hijacking with the appropriate balance of the security level and user convenience.

Versions
========

Current development release: `loginblockchain-master.tar.gz`

Changelog
---------

+---------+------------+------------------------------------------------------+
| Version | Date       | Changes                                              |
+=========+============+======================================================+
| 0.1.0   | 2019-09-19 | - initial public release                             |
+---------+------------+------------------------------------------------------+

What is Login Block Chain?
==========================

Login Block Chain (actually ``Loing Hash Block Chain``) is a module for generating login-logout hash block-chain algorithms.


How to install
==============

To install the library, you can either use pip, or just download it separately. Installing in pip is the simplest. Assuming you are installing it system-wide:

    $ sudo pip install loginblockchain
(if you are installing it in virtualenv, you do not need "``sudo``" part).

Alternatively, you can follow the download link above and unpack in some directory on your ``sys.path``, or clone it as Git submodule to your own directory.

How to use Login Block Chain
============================

You can use this module in the following way::

1. Install module (download it into your application's directory or into modules directory)

2. To get ``loginhashblock`` you invoke it like that::
       
       from loginhashblock.loginhashblock import *

       devid = create_deviceId()
       prev_loginhashblock = None
       loginhashblock = create_loginhashblock(devid)
       loginhashblocklist = update_loginhashblocklist(loginhashblocklist, loginhashblock)

.. note::
    ``devid`` is a random variable to generated by server-side, It neet to generate for ``loginhashblock``. The client authenticates using the account data to log in to the service and additionally authenticates using multi-factor authentication to successfully complete login. The server configures the environment data and login status data of the client into a block and generates the ``loginhashblock``. It then generates a new ``loginhashblock`` and update ``loginhashblocklist`` in databases with the time of the previous ``loginhashblock`` generation and the previous ``loginhashblock`` and shares it with the client. There is no previous ``loginhashblock`` for the initial status.
    ``prev_loginhashblock`` is a previous shared ``loginhashblock`` of the server-side. If your are login at first, ``prev_loginhashblock`` is none and you have to authenticates using multi-factor authentication.

3. To update ``loginhashblock`` you invoke it like that::

       from loginhashblock.loginhashblock import *

       loginhashblock = update_loginhashblock(prev_loginhashblock)
       loginhashblocklist = update_loginhashblocklist(loginhashblocklist, loginhashblock)

   where ``prev_loginhashblock`` is a previous shared ``loginhashblock`` of the server-side, current trial (if checking on the server, you have to check several values, higher than the last successful one, determined for previous successful authentications).

4. To check ``loginhashblock`` you invoke it like that::

       is_valid = valid_loginhashblock(prev_loginhashblock)
       is_valid = valid_prevloginhashblock(prev_loginhashblock, loginhashblocklist):

   where:

   - ``is_valid`` is being assigned value of False if your login hash block has not been identified.
   - If it has been successful, ``is_valid`` is assigned a True (it should be saved into the database and supplied to the function as last argument next time the password is being checked, so you cannot use the same ``loginhashblock`` again).

License
=======

License for this library is available in ``LICENSE.rst`` file, in the same
directory. Online version is available here_.

.. _here: https://github.com/masuwonchon/loginblockchain/blob/master/LICENSE.rst

Reference
=========

``Documents for this library`` is available in ``docs`` file, in the same directory. Online version is available here .

.. _here: https://masuwonchon.github.io/loginblockchain/html/index.html


