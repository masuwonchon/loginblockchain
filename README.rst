Versions
========

Current development release: `loginblockchain-master.tar.gz`

Changelog
---------

+---------+------------+------------------------------------------------------+
| Version | Date       | Changes                                              |
+=========+============+======================================================+
| 0.8.0   | 2019-09-19 | - initial public release                             |
+---------+------------+------------------------------------------------------+

What is LoginBlockChain?
==========================

LoginBlockChain (actually ``loginblockchain``) is a module for generating login hash block-chain algorithms.


How to install
==============

To install the library, you can either use pip, or just download it separately. Installing in pip is the simplest. Assuming you are installing it system-wide:

    $ sudo pip install loginblockchain
(if you are installing it in virtualenv, you do not need "``sudo``" part).

Alternatively, you can follow the download link above and unpack in some directory on your ``sys.path``, or clone it as Git submodule to your own directory.

How to use Login Block Chain
============================

You can use this module in the following way::

1. Install module (download it into your application's directory or into modules directory)

2. To get ``loginhashblock`` you invoke it like that::
       
       from loginhashblock.loginhashblock import *

       devid = create_deviceId()
       prev_loginhashblock = None
       loginhashblock = create_loginhashblock(devid)
       loginhashblocklist = update_loginhashblocklist(loginhashblocklist, loginhashblock)

.. note::
    ``devid`` is a random variable to generated by server-side, It neet to generate for ``loginhashblock``. The client authenticates using the account data to log in to the service and additionally authenticates using multi-factor authentication to successfully complete login. The server configures the environment data and login status data of the client into a block and generates the ``loginhashblock``. It then generates a new ``loginhashblock`` and update ``loginhashblocklist`` in databases with the time of the previous ``loginhashblock`` generation and the previous ``loginhashblock`` and shares it with the client. There is no previous ``loginhashblock`` for the initial status.

3. To update ``loginhashblock`` you invoke it like that::

       from loginhashblock.loginhashblock import *

       loginhashblock = update_loginhashblock(prev_loginhashblock)
       loginhashblocklist = update_loginhashblocklist(loginhashblocklist, loginhashblock)

   where ``prev_loginhashblock`` is a previously shared ``loginhashblock`` of the server-side, current trial (if checking on the server, you have to check several values, higher than the last successful one, determined for previous successful authentications).

4. To check ``loginhashblock`` you invoke it like that::

       is_valid = valid_loginhashblock(prev_loginhashblock)
       is_valid = valid_prevloginhashblock(prev_loginhashblock, loginhashblocklist, DEBUG=DEBUG):

   where:

   - ``is_valid`` is being assigned value of False if your login hash block has not been identified.
   - If it has been successful, ``is_valid`` is assigned a True (it should be saved into the database and supplied to the function as last argument next time the password is being checked, so you cannot use the same ``loginhashblock`` again).

License
=======

License for this library is available in ``LICENSE.rst`` file, in the same
directory. Online version is available here_.

.. _here: https://github.com/masuwonchon/loginblockchain/LICENSE.rst
